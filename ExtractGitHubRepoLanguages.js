'use strict';

//modules to import
const rp = require('request-promise');
const cheerio = require('cheerio');
var fs = require('fs');
var csvWriter = require('csv-write-stream');
//var download_git_repo = require('download-git-repo');
var csv = require('fast-csv');

// Reaching tweets through their search URL
var options = {
    uri: 'https://github.com/MatisiekPL/Czekolada',
    transform: function (body) {
        return cheerio.load(body);
    }
};

//5 seconds delay for each request
const delay = 5000; 

// In this file we are removing the issues url and only keeping github repositary url

// Implementing hash set with javascript to check duplicates in constant time
var hashset = {
    //1: true,
    //2: true,
    //key: true
    //key is value and is always true 
};

var checkValue = function (value) {
    return hashset[value] === true;
};

var appendValue = function (value) {
    hashset[value] = true;
};


//There will be a url like following sample
// https://github.com/MatisiekPL/Czekolada/issues/4962
// We can take last index of char '/' twice to substr,
//  and return remaining url as repo url
var processIssueUrl = function (issue_url) {
    if (issue_url.indexOf('"') == 0) { issue_url = issue_url.substr(1); }
    issue_url = issue_url.substr(0, issue_url.lastIndexOf('/'));
    return issue_url.substr(0, issue_url.lastIndexOf('/'));
};


// For testing we need start and end values
const start_index = 0;
const end_index = -1;

//Reading issue url file generated by python code
let k = 0;
let q = 0;


var csv_writer_options = {
    separator: ',',
    newline: '\n',
    headers: ['row_number', 'repo_owner', 'repo_name', 'language', 'weightage'],
    sendHeaders:  false 
}

// functiona to create directory, 
// with relative path parameter
function createDirectory(path) {
    try {
        if (!fs.existsSync(path)) {
            fs.mkdirSync(path);
            console.log('>> new directory with at location "' + path + '" has been created.')
        }
        else
            console.log('>> "' + path + '" path already exists.')
    }
    catch (error) { console.log(error); }
}

//createDirectory("..\\languageStats");


function GetLanguageOfRepoFromGithub(repo_owner, repo_name, url_row_index, k, q, file_number) {

    var repo_url = repo_owner
        + '/'
        + repo_name;

    if (checkValue(repo_url)) {
        return;
    }

    console.log("start of request for k :: " + k);
    appendValue(repo_url);
    var search_query = 'https://github.com/'
        + repo_url;
        

    //verifying search query
    console.log(search_query);
    options.uri = search_query;


    rp(options)
        .then(($) => {
            
            var $langugesElement = $('ol.repository-lang-stats-numbers > li');
               
            console.log("language state count :: "+ $langugesElement.length);

            if ($langugesElement.length > 0) {
                
               // if (k == 0)
                 //   csv_writer_options.sendHeaders = true;


                var writer = new csvWriter(csv_writer_options);

                var filename =  '..\\languageStats\\repoLanguages_'
                    + file_number
                    + '.csv';
                writer.pipe(fs.createWriteStream(filename, { flags: 'a' }));

                //Extracting tweet information from HTML content
                $langugesElement.each(function (index, element) {
                    var language_index = index ;
                    var language_name = $(this).find('span.lang').text();
                    var weightage = $(this).find('span.percent').text();
                    
                    writer.write({
                        'row_number': url_row_index, 'repo_owner': repo_owner, 'repo_name': repo_name,
                        'language': language_name, 'weightage': weightage, 'language_index': language_index
                        
                    });

                    
                });
                writer.end();


                
            }

            console.log("end of response for k :: " + k);

        })
        .catch((err) => {
            console.log("found error in request/response for k :: " + k);
            console.log(err);

        });
}

/**
 * Below function calls are just to test the method
 */
//GetLanguageOfRepoFromGithub("cyberdh", "Text-Analysis", 0, 0, 0, 0)
//GetLanguageOfRepoFromGithub("dgrtwo", "tidy-text-mining", 0, 1, 0, 0)




//method to start reading csv document 
// and calls search
function ProcessCSVFile(file_number) {
    

    var k = 0; //variable to keep track of only processed records in csv file
    var q = 0; //variable to keep track of lines in csv file

    fs.createReadStream('..\\multiplefilesWithLang\\subset_' + file_number + '.csv')
        .pipe(csv())
        .on('data', function (data) {

            console.log(q);
            if (q > start_index & ( end_index == -1 || q <= end_index)) {
                setTimeout(function () {
                    console.log("__start___processing__for___k:" + k);
                    console.log(data[0]); //row_index
                    console.log(data[1]); //issue_title
                    //console.log(data[2]); //body
                    //console.log(data[3]); //isLanguageEnglish -- Always True
                    console.log(); //Owner
                    console.log(data[5]); //Repo name
                    console.log(data[6]); //Issue number

                    var start_date = data[3].toString();
                    var end_date = data[4].toString();

                    
                     //Searching 
                    //GetLanguageOfRepoFromGithub(repo_owner, repo_name, url_row_index, k, q, file_number)
                    GetLanguageOfRepoFromGithub(data[4], data[5], data[0], k, q, file_number);
                    
                    console.log("__reached at end of function for k :: " + k);
                    k++;
                }, delay * (q - start_index));
            }
            q++;
        })
        .on('end', function (data) {
            console.log('Read Finished');
        });

}


//calling function to process files, one at a time
ProcessCSVFile(37);
